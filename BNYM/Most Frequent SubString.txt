Most Frequent Substring
-------------------------

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    /*
     * Complete the 'getMaxOccurrences' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER minLength
     *  3. INTEGER maxLength
     *  4. INTEGER maxUnique
     */

    public static int getMaxOccurrences(String s, int minLength, int maxLength, int maxUnique) {
    // Write your code here
        Set<Character> uniqueChars = new HashSet<Character>();
        Map<String, Integer> stats = new HashMap<String, Integer>();
        for (int h = 0; h < s.length() - minLength; h++) {
            for (int t = h + minLength ; t <= s.length() && t <= h + maxLength && uniqueChars.size() <= maxUnique; t++) {
                uniqueChars.clear();
                String subStr = s.substring(h, t);
                if (stats.containsKey(subStr)) {
                stats.put(subStr, stats.get(subStr) + 1);
                populateSet(subStr, uniqueChars);
                } else {
                stats.put(subStr, 1);
            }
        }
    }

        PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<Map.Entry<String, Integer>>(stats.size(), new                   Comparator<Map.Entry<String, Integer>>() {
            @Override
            public int compare(Map.Entry<String, Integer> o1,Map.Entry<String, Integer> o2) {
                return o2.getValue() - o1.getValue();
            }
        });

        pq.addAll(stats.entrySet());
        Map.Entry<String, Integer> entry = pq.poll();
        System.out.println(entry.getKey());
        return entry.getValue();
    }

        private static void populateSet(String s, Set<Character> uniqueChars) {
            Objects.requireNonNull(s);
            Objects.requireNonNull(uniqueChars);
            for (char c : s.toCharArray())
            uniqueChars.add(c);


        }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        int minLength = Integer.parseInt(bufferedReader.readLine().trim());

        int maxLength = Integer.parseInt(bufferedReader.readLine().trim());

        int maxUnique = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.getMaxOccurrences(s, minLength, maxLength, maxUnique);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
